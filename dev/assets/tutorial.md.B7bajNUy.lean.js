import{_ as a,c as n,a5 as i,o as p}from"./chunks/framework.JxB36BY9.js";const t="/EHTJulia.github.io/StationaryRandomFields.jl/dev/assets/signalnoise2d.eXhzmKtD.png",g=JSON.parse('{"title":"Tutorial","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial.md","filePath":"tutorial.md","lastUpdated":null}'),l={name:"tutorial.md"};function e(h,s,d,k,c,o){return p(),n("div",null,s[0]||(s[0]=[i(`<h1 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h1><p>This example code segment uses StationaryRandomFields.jl to generate correlated noise for a signal of given dimensions.</p><p>We begin by defining a noise signal object with dimensions input as a tuple.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StationaryRandomFields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFTW</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define a 2D signal with dimensions (1000,1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NoiseSignal{Tuple{Int64, Int64}}((1000, 1000))</span></span></code></pre></div><p>We can immediately access the RFFT frequency grid that corresponds to the signal dimensions</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ν </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rfftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>([0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.5], [0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  -0.01, -0.009000000000000001, -0.008, -0.007, -0.006, -0.005, -0.004, -0.003, -0.002, -0.001])</span></span></code></pre></div><p>We can also directly create Gaussian noise in Fourier space for the given signal with an optional input of the desired rng (if not the default). This is not a necessary step as the NoiseGenerator will implement it automatically later.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_gaussian_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>501×1000 Matrix{ComplexF64}:</span></span>
<span class="line"><span>        0.0+0.0im          -1.80411+0.929026im   …    0.202731+0.34066im</span></span>
<span class="line"><span>   0.192762+0.769082im    -0.491512-0.0261228im      0.0574104-1.53272im</span></span>
<span class="line"><span>  0.0747927-0.313638im    -0.594663+0.671593im        0.559939-0.016436im</span></span>
<span class="line"><span>  -0.806166+0.759299im      0.32406-0.708394im        0.266945-0.584614im</span></span>
<span class="line"><span>  -0.709164+0.0260937im  -0.0118027-0.935833im      -0.0219049+0.733835im</span></span>
<span class="line"><span>  -0.997211-0.968434im     -1.70039-1.32098im    …    -1.13638+0.698im</span></span>
<span class="line"><span>   0.615162+0.0817828im    0.516977-0.0341681im     0.00500151-0.197816im</span></span>
<span class="line"><span>  -0.458157+0.706972im      0.68449+0.943923im         1.70328+0.480288im</span></span>
<span class="line"><span>    1.20274+0.0932296im   -0.383937-0.726748im      -0.0471105+0.958544im</span></span>
<span class="line"><span> -0.0857634+0.230969im   -0.0792504-0.263988im        -1.01574+0.275361im</span></span>
<span class="line"><span>           ⋮                                     ⋱  </span></span>
<span class="line"><span>   0.173986+0.0686932im    0.693432-0.917805im       -0.907846-0.450943im</span></span>
<span class="line"><span>  -0.258823-0.278758im     0.266261-0.751866im        -0.45184+0.498362im</span></span>
<span class="line"><span>  -0.100695+0.26436im       0.55957+0.964778im       -0.787719+0.163396im</span></span>
<span class="line"><span>  -0.735213-1.42201im       1.34219-0.0717723im  …    0.661549-0.0154235im</span></span>
<span class="line"><span>    1.08913-0.163082im     0.112418+0.499918im       -0.171093-0.568673im</span></span>
<span class="line"><span>    0.11866-0.186524im    -0.592381-1.07871im         0.567141+1.29764im</span></span>
<span class="line"><span>  -0.969501+0.379828im     0.308489+0.700516im       -0.139462+0.592356im</span></span>
<span class="line"><span>    -0.8309-0.661919im    -0.409584+0.488509im        0.266284-1.03164im</span></span>
<span class="line"><span>   -1.39388+0.0im          0.420582+0.687064im   …    0.895853-0.97737im</span></span></code></pre></div><p>Now construct the power spectrum to be used, designating the dimension in brackets.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a basic power spectrum with index β = -2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SinglePowerLaw{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SinglePowerLaw{2, Float64}(-2.0)</span></span></code></pre></div><p>The power spectrum may be modified via renormalization, rotation, and stretching</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renormed_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renormed_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">π</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># π/6 is the rotation factor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stretched_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stretched</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rotated_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 100 is the stretch factor of both axes</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ModifiedPowerSpectrumModel</span></span>
<span class="line"><span>  base model: SinglePowerLaw{2, Float64}</span></span>
<span class="line"><span>  Modifiers:</span></span>
<span class="line"><span>    1. Renormalize{Int64}</span></span>
<span class="line"><span>    2. Rotate{Float64}</span></span>
<span class="line"><span>    3. Stretch{Int64, 2}</span></span></code></pre></div><p>The noise generator requires a <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.ContinuousNoiseSignal"><code>ContinuousNoiseSignal</code></a> as input, which can be created from the original <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ContinuousNoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ContinuousNoiseSignal{Float64, NoiseSignal{Tuple{Int64, Int64}}, Tuple, FFTW.rFFTWPlan{Float64, -1, false, 2, Tuple{Int64, Int64}}, AbstractFFTs.ScaledPlan{ComplexF64, FFTW.rFFTWPlan{ComplexF64, 1, false, 2, Tuple{Int64, Int64}}, Float64}}(NoiseSignal{Tuple{Int64, Int64}}((1000, 1000)), (1000, 1000), FFTW real-to-complex plan for 1000×1000 array of Float64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dit/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cfdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dit/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cfdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-r2hc-direct-2 &quot;r2cf_2&quot;)</span></span>
<span class="line"><span>            (rdft2-r2hc01-direct-2 &quot;r2cfII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1fv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-r2hc01-direct-20 &quot;r2cfII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n2fv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))), 1.0e-6 * FFTW complex-to-real plan for 501×1000 array of ComplexF64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dif/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cbdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dif/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cbdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-hc2r-direct-2 &quot;r2cb_2&quot;)</span></span>
<span class="line"><span>            (rdft2-hc2r10-direct-2 &quot;r2cbIII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1bv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-hc2r10-direct-20 &quot;r2cbIII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n1bv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))))</span></span></code></pre></div><p>Now create a power spectrum noise generator comprising the designated power spectrum and continuous noise signal. Note that the power spectrum and noise signal must be of the same dimension. The output <code>signoise</code> gives correlated power-law noise in the signal domain, with dimensions of the original <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a> object.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">noisegen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PSNoiseGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stretched_ps, cns)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># generate signal noise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_signal_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(noisegen)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1000×1000 Matrix{Float64}:</span></span>
<span class="line"><span> -22.6564   -18.3019     9.08704  …  -20.1063    -30.9238   -34.6041</span></span>
<span class="line"><span> -10.0998     2.4563     3.38918     -19.5569     -3.77827  -21.4816</span></span>
<span class="line"><span>   2.18162    1.29762  -23.4467       -9.20899    -2.47586   -6.7733</span></span>
<span class="line"><span>   1.7386    -1.56783  -12.8707       -0.791962   -7.5066    -2.84556</span></span>
<span class="line"><span>  -3.95203   -3.84111    2.70687      -6.97538    -3.53519    3.05139</span></span>
<span class="line"><span>   4.74519   15.296      4.9656   …    7.14951     9.33923   -2.8789</span></span>
<span class="line"><span>   1.86971   -3.34934   -0.44734       6.26432   -10.5826    -4.33939</span></span>
<span class="line"><span> -17.8842   -10.1229   -18.9996      -10.2862    -19.1304     2.35366</span></span>
<span class="line"><span> -14.3194    -5.89717  -19.3551        4.91291   -15.0499   -21.9328</span></span>
<span class="line"><span> -17.3376    -6.30507  -19.065       -16.1387    -10.7906    -2.19459</span></span>
<span class="line"><span>   ⋮                              ⋱                         </span></span>
<span class="line"><span> -33.9709   -31.3063   -46.2968      -12.225      -9.93816  -24.7391</span></span>
<span class="line"><span> -26.1172   -24.9425   -44.1695       -4.13485   -23.0007   -38.4698</span></span>
<span class="line"><span> -38.0106   -39.9017   -34.7957      -26.2082     -3.69496  -20.3269</span></span>
<span class="line"><span> -25.4718   -19.8471   -16.1085      -19.2708     -2.07337  -16.7732</span></span>
<span class="line"><span>  -6.41844   -2.296    -20.9206   …  -19.8182    -30.6499   -15.6607</span></span>
<span class="line"><span> -10.0251    -3.40984  -13.7615       -7.28522   -25.1646    -9.57719</span></span>
<span class="line"><span> -34.6182   -11.3064    -8.03949     -33.4349    -17.2158   -22.3454</span></span>
<span class="line"><span> -23.3103    -8.0853    -9.17577     -25.7142    -26.5331   -11.6633</span></span>
<span class="line"><span> -12.3992    -9.20894    1.5205      -16.8618    -41.325    -21.2332</span></span></code></pre></div><h2 id="plotting" tabindex="-1">Plotting <a class="header-anchor" href="#plotting" aria-label="Permalink to &quot;Plotting&quot;">​</a></h2><p>We can now plot our generated signal noise in the signal domain:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># plot signal noise in position plane</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xgrid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Signal Noise in Image Plane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contourf!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], xgrid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, signoise)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Colorbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], cplot)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+t+'" alt=""></p>',27)]))}const u=a(l,[["render",e]]);export{g as __pageData,u as default};
