import{_ as a,c as n,a5 as i,o as p}from"./chunks/framework.JxB36BY9.js";const t="/EHTJulia.github.io/StationaryRandomFields.jl/dev/assets/signalnoise2d.eXhzmKtD.png",g=JSON.parse('{"title":"Tutorial","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial.md","filePath":"tutorial.md","lastUpdated":null}'),l={name:"tutorial.md"};function e(h,s,d,k,c,o){return p(),n("div",null,s[0]||(s[0]=[i(`<h1 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h1><p>This example code segment uses StationaryRandomFields.jl to generate correlated noise for a signal of given dimensions.</p><p>We begin by defining a noise signal object with dimensions input as a tuple.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StationaryRandomFields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFTW</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define a 2D signal with dimensions (1000,1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NoiseSignal{Tuple{Int64, Int64}}((1000, 1000))</span></span></code></pre></div><p>We can immediately access the RFFT frequency grid that corresponds to the signal dimensions</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ν </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rfftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>([0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.5], [0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  -0.01, -0.009000000000000001, -0.008, -0.007, -0.006, -0.005, -0.004, -0.003, -0.002, -0.001])</span></span></code></pre></div><p>We can also directly create Gaussian noise in Fourier space for the given signal with an optional input of the desired rng (if not the default). This is not a necessary step as the NoiseGenerator will implement it automatically later.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_gaussian_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>501×1000 Matrix{ComplexF64}:</span></span>
<span class="line"><span>       0.0+0.0im        -1.63554-0.292975im   …     -1.1059+1.10368im</span></span>
<span class="line"><span> -0.967423+0.25007im   -0.350607-1.09587im          0.29505-0.482132im</span></span>
<span class="line"><span> 0.0929603-1.22925im    0.607994-0.171008im       -0.475316-0.0276488im</span></span>
<span class="line"><span> -0.724637-0.803161im   0.391248-0.812842im        0.212948+0.910422im</span></span>
<span class="line"><span>   1.08281+0.578044im   0.115992+0.835862im       -0.334834-0.23299im</span></span>
<span class="line"><span> -0.438082+0.97529im    0.602712-0.756264im   …    -0.11121+1.00609im</span></span>
<span class="line"><span> -0.423888-0.104301im  -0.390309-0.685376im        0.266922+0.689885im</span></span>
<span class="line"><span>  0.635371+0.532608im    1.23713-0.493683im       -0.207146-0.399262im</span></span>
<span class="line"><span>    1.7296+0.501935im   -0.45545-0.383465im         0.43096-0.770473im</span></span>
<span class="line"><span>  -0.11312+0.308036im    1.62973+0.253784im       -0.466407-1.2883im</span></span>
<span class="line"><span>          ⋮                                   ⋱  </span></span>
<span class="line"><span>  0.821953+0.375975im   0.293678-0.0304989im       0.304859-0.684581im</span></span>
<span class="line"><span>   1.29753+0.315506im   0.251166+0.130087im         0.62022+0.108682im</span></span>
<span class="line"><span>  0.737137-0.521253im  -0.193651-1.05501im        -0.811863+0.741597im</span></span>
<span class="line"><span>  0.332756-0.679171im   0.424614-0.231421im   …    0.218298-0.545458im</span></span>
<span class="line"><span>  0.203765-0.277633im  -0.282716-0.702193im      -0.0783963-0.147526im</span></span>
<span class="line"><span> -0.285663-0.355909im   0.320553+0.229314im         1.18071+1.23797im</span></span>
<span class="line"><span> -0.838954+0.642372im    1.03912+0.0827966im     0.00536936+0.691362im</span></span>
<span class="line"><span>  0.849007+0.946452im    -1.6376+0.284323im         1.44576+0.200475im</span></span>
<span class="line"><span> -0.544755+0.0im         -0.4867+0.862442im   …    0.639205-0.0613912im</span></span></code></pre></div><p>Now construct the power spectrum to be used, designating the dimension in brackets.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a basic power spectrum with index β = -2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SinglePowerLaw{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SinglePowerLaw{2, Float64}(-2.0)</span></span></code></pre></div><p>The power spectrum may be modified via renormalization, rotation, and stretching</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renormed_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renormed_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">π</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># π/6 is the rotation factor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stretched_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stretched</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rotated_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 100 is the stretch factor of both axes</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ModifiedPowerSpectrumModel</span></span>
<span class="line"><span>  base model: SinglePowerLaw{2, Float64}</span></span>
<span class="line"><span>  Modifiers:</span></span>
<span class="line"><span>    1. Renormalize{Int64}</span></span>
<span class="line"><span>    2. Rotate{Float64}</span></span>
<span class="line"><span>    3. Stretch{Int64, 2}</span></span></code></pre></div><p>The noise generator requires a <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.ContinuousNoiseSignal"><code>ContinuousNoiseSignal</code></a> as input, which can be created from the original <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ContinuousNoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ContinuousNoiseSignal{Float64, NoiseSignal{Tuple{Int64, Int64}}, Tuple, FFTW.rFFTWPlan{Float64, -1, false, 2, Tuple{Int64, Int64}}, AbstractFFTs.ScaledPlan{ComplexF64, FFTW.rFFTWPlan{ComplexF64, 1, false, 2, Tuple{Int64, Int64}}, Float64}}(NoiseSignal{Tuple{Int64, Int64}}((1000, 1000)), (1000, 1000), FFTW real-to-complex plan for 1000×1000 array of Float64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dit/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cfdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dit/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cfdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-r2hc-direct-2 &quot;r2cf_2&quot;)</span></span>
<span class="line"><span>            (rdft2-r2hc01-direct-2 &quot;r2cfII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1fv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-r2hc01-direct-20 &quot;r2cfII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n2fv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))), 1.0e-6 * FFTW complex-to-real plan for 501×1000 array of ComplexF64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dif/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cbdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dif/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cbdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-hc2r-direct-2 &quot;r2cb_2&quot;)</span></span>
<span class="line"><span>            (rdft2-hc2r10-direct-2 &quot;r2cbIII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1bv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-hc2r10-direct-20 &quot;r2cbIII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n1bv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))))</span></span></code></pre></div><p>Now create a power spectrum noise generator comprising the designated power spectrum and continuous noise signal. Note that the power spectrum and noise signal must be of the same dimension. The output <code>signoise</code> gives correlated power-law noise in the signal domain, with dimensions of the original <a href="/EHTJulia.github.io/StationaryRandomFields.jl/dev/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a> object.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">noisegen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PSNoiseGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stretched_ps, cns)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># generate signal noise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_signal_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(noisegen)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1000×1000 Matrix{Float64}:</span></span>
<span class="line"><span> -26.0625    -3.95892    -0.103871  …   15.0231    -3.79641   -15.1547</span></span>
<span class="line"><span> -25.7802   -20.0771     -7.55495       16.2522    -9.66338   -17.0373</span></span>
<span class="line"><span> -16.983    -18.5052    -19.5476         3.59596   -5.67573   -14.9764</span></span>
<span class="line"><span> -10.8396   -15.1522     -0.230581       1.87907    5.28964    -4.3595</span></span>
<span class="line"><span>  -1.00981   -9.3921    -14.0763       -11.2262    -9.66143    -4.13852</span></span>
<span class="line"><span>  12.5421     2.5329    -12.8047    …   -4.81084   -4.68138    10.435</span></span>
<span class="line"><span>  17.774      5.52062   -16.5516         3.16069    5.39962    -2.61482</span></span>
<span class="line"><span> -24.19     -14.8978     -2.74895       -9.39871   -7.20636   -13.1112</span></span>
<span class="line"><span> -10.5453    -7.20205    -9.26103      -11.1857   -10.2547    -13.6725</span></span>
<span class="line"><span>   4.3347    -0.182321  -14.7548        -4.12195   -9.70349   -21.8573</span></span>
<span class="line"><span>   ⋮                                ⋱                         </span></span>
<span class="line"><span>  17.1234     7.78498    11.4552         1.88953   -2.9662      7.88541</span></span>
<span class="line"><span>  12.5938     8.1989     15.8184        -3.17347    5.67268    20.5557</span></span>
<span class="line"><span>  20.0525     8.3163     12.518          3.17916   22.3248     24.9164</span></span>
<span class="line"><span>  20.1877    21.5769     18.1783        12.1595    22.4999     34.3357</span></span>
<span class="line"><span>  25.5266    19.6107     24.0743    …   24.1097     0.761548   21.7757</span></span>
<span class="line"><span>  23.5985    10.2521     -0.546819      10.9827    -8.52862     7.50792</span></span>
<span class="line"><span>   3.17697   -5.9514      0.927851     -14.9175   -17.3733     -4.55698</span></span>
<span class="line"><span>  -7.84497  -10.0491     11.6196       -16.0406   -13.8829     -0.948804</span></span>
<span class="line"><span> -23.0249    -9.55663     5.30589       -4.31545    5.38459    -8.10289</span></span></code></pre></div><h2 id="plotting" tabindex="-1">Plotting <a class="header-anchor" href="#plotting" aria-label="Permalink to &quot;Plotting&quot;">​</a></h2><p>We can now plot our generated signal noise in the signal domain:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># plot signal noise in position plane</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xgrid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Signal Noise in Image Plane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contourf!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], xgrid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, signoise)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Colorbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], cplot)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+t+'" alt=""></p>',27)]))}const u=a(l,[["render",e]]);export{g as __pageData,u as default};
