import{_ as a,c as n,a5 as i,o as p}from"./chunks/framework.Cis13qR2.js";const t="/StationaryRandomFields.jl/v0.1.3/assets/rvpupsx.D_DJ3YC6.png",g=JSON.parse('{"title":"Tutorial","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial.md","filePath":"tutorial.md","lastUpdated":null}'),l={name:"tutorial.md"};function e(h,s,d,k,c,r){return p(),n("div",null,s[0]||(s[0]=[i(`<h1 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h1><p>This example code segment uses StationaryRandomFields.jl to generate correlated noise for a signal of given dimensions.</p><p>We begin by defining a noise signal object with dimensions input as a tuple.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StationaryRandomFields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFTW</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define a 2D signal with dimensions (1000,1000)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NoiseSignal{Tuple{Int64, Int64}}((1000, 1000))</span></span></code></pre></div><p>We can immediately access the RFFT frequency grid that corresponds to the signal dimensions</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ν </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rfftfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>([0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.5], [0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009000000000000001  …  -0.01, -0.009000000000000001, -0.008, -0.007, -0.006, -0.005, -0.004, -0.003, -0.002, -0.001])</span></span></code></pre></div><p>We can also directly create Gaussian noise in Fourier space for the given signal with an optional input of the desired rng (if not the default). This is not a necessary step as the NoiseGenerator will implement it automatically later.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gnoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_gaussian_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>501×1000 Matrix{ComplexF64}:</span></span>
<span class="line"><span>       0.0+0.0im        -0.269552-0.429813im   …     1.41428-0.482105im</span></span>
<span class="line"><span> -0.830418-0.26426im     -1.87363+1.50812im        -0.576537-0.310449im</span></span>
<span class="line"><span> -0.244077-0.532124im  -0.0442435+0.983915im       -0.103151+0.962699im</span></span>
<span class="line"><span>  0.181734+0.22135im     -1.13062+0.963826im        0.108631+0.800489im</span></span>
<span class="line"><span>  -1.28894-1.30904im    0.0404853-0.229014im        0.298692-0.730373im</span></span>
<span class="line"><span>  0.847101+0.047284im    0.595183-0.520453im   …    0.115357+0.325241im</span></span>
<span class="line"><span> -0.393936-1.21027im    -0.192824-0.44689im        -0.773383+0.678284im</span></span>
<span class="line"><span>  0.586405+0.815886im    -0.35529+0.299089im       0.0429231-0.368123im</span></span>
<span class="line"><span>  0.371949+0.371633im    -1.07715+0.854258im         1.08109+0.307125im</span></span>
<span class="line"><span> -0.626764-0.553526im     0.59381-2.06708im         0.177241+0.123983im</span></span>
<span class="line"><span>          ⋮                                    ⋱  </span></span>
<span class="line"><span> 0.0306097-0.515289im   -0.198415+1.12139im        -0.746693-0.935851im</span></span>
<span class="line"><span>  0.277608+0.398337im  -0.0983214-0.0822972im       0.974913-0.113061im</span></span>
<span class="line"><span>  -1.14263+0.61695im   -0.0133414+0.788364im       -0.345254-0.186545im</span></span>
<span class="line"><span>  0.387461+0.354029im    0.864576+1.22085im    …    0.564244-1.00237im</span></span>
<span class="line"><span> -0.182351+0.1848im      0.847312+1.04999im        -0.143567-0.520828im</span></span>
<span class="line"><span>  0.634817-0.744711im   -0.995675-0.0875825im      -0.456667+0.99535im</span></span>
<span class="line"><span>  0.974676+0.213044im    0.616495+1.09545im         0.780201-0.353582im</span></span>
<span class="line"><span>  -1.08735+1.07079im     0.249308+0.0541121im     -0.0427284-0.36255im</span></span>
<span class="line"><span> -0.312939+0.0im          0.47319+1.2115im     …   -0.141857-0.758465im</span></span></code></pre></div><p>Now construct the power spectrum to be used, designating the dimension in brackets.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a basic power spectrum with index β = -2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SinglePowerLaw{2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SinglePowerLaw{2, Float64}(-2.0)</span></span></code></pre></div><p>The power spectrum may be modified via renormalization, rotation, and stretching</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renormed_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rotated_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renormed_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">π</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># π/6 is the rotation factor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stretched_ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stretched</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rotated_ps, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 100 is the stretch factor of both axes</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ModifiedPowerSpectrumModel</span></span>
<span class="line"><span>  base model: SinglePowerLaw{2, Float64}</span></span>
<span class="line"><span>  Modifiers:</span></span>
<span class="line"><span>    1. Renormalize{Int64}</span></span>
<span class="line"><span>    2. Rotate{Float64}</span></span>
<span class="line"><span>    3. Stretch{Int64, 2}</span></span></code></pre></div><p>The noise generator requires a <a href="/StationaryRandomFields.jl/v0.1.3/autodocs#StationaryRandomFields.ContinuousNoiseSignal"><code>ContinuousNoiseSignal</code></a> as input, which can be created from the original <a href="/StationaryRandomFields.jl/v0.1.3/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ContinuousNoiseSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signal)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ContinuousNoiseSignal{Float64, NoiseSignal{Tuple{Int64, Int64}}, Tuple, FFTW.rFFTWPlan{Float64, -1, false, 2, Tuple{Int64, Int64}}, AbstractFFTs.ScaledPlan{ComplexF64, FFTW.rFFTWPlan{ComplexF64, 1, false, 2, Tuple{Int64, Int64}}, Float64}}(NoiseSignal{Tuple{Int64, Int64}}((1000, 1000)), (1000, 1000), FFTW real-to-complex plan for 1000×1000 array of Float64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dit/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cfdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dit/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cfdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-r2hc-direct-2 &quot;r2cf_2&quot;)</span></span>
<span class="line"><span>            (rdft2-r2hc01-direct-2 &quot;r2cfII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1fv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-r2hc01-direct-20 &quot;r2cfII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n2fv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3fv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3fv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2fv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))), 1.0e-6 * FFTW complex-to-real plan for 501×1000 array of ComplexF64</span></span>
<span class="line"><span>(rdft2-rank&gt;=2/1</span></span>
<span class="line"><span>  (rdft2-vrank&gt;=1-x1000/1</span></span>
<span class="line"><span>    (rdft2-ct-dif/20</span></span>
<span class="line"><span>      (hc2c-direct-20/76/0 &quot;hc2cbdftv_20_avx2&quot;</span></span>
<span class="line"><span>        (rdft2-ct-dif/2</span></span>
<span class="line"><span>          (hc2c-direct-2/4/0 &quot;hc2cbdftv_2_avx2&quot;</span></span>
<span class="line"><span>            (rdft2-hc2r-direct-2 &quot;r2cb_2&quot;)</span></span>
<span class="line"><span>            (rdft2-hc2r10-direct-2 &quot;r2cbIII_2&quot;))</span></span>
<span class="line"><span>          (dft-direct-10 &quot;n1bv_10_avx2_128&quot;))</span></span>
<span class="line"><span>        (rdft2-hc2r10-direct-20 &quot;r2cbIII_20&quot;))</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x10/1</span></span>
<span class="line"><span>        (dft-ct-dit/5</span></span>
<span class="line"><span>          (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-direct-10-x5 &quot;n1bv_10_avx2_128&quot;)))))</span></span>
<span class="line"><span>  (dft-buffered-1000-x32/501-6</span></span>
<span class="line"><span>    (dft-vrank&gt;=1-x32/1</span></span>
<span class="line"><span>      (dft-ct-dit/25</span></span>
<span class="line"><span>        (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>        (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>          (dft-ct-dit/5</span></span>
<span class="line"><span>            (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>            (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>    (dft-r2hc-1</span></span>
<span class="line"><span>      (rdft-rank0-tiledbuf/2-x32-x1000))</span></span>
<span class="line"><span>    (dft-buffered-1000-x21/21-6</span></span>
<span class="line"><span>      (dft-vrank&gt;=1-x21/1</span></span>
<span class="line"><span>        (dft-ct-dit/25</span></span>
<span class="line"><span>          (dftw-direct-25/8 &quot;t3bv_25_avx2_128&quot;)</span></span>
<span class="line"><span>          (dft-vrank&gt;=1-x25/1</span></span>
<span class="line"><span>            (dft-ct-dit/5</span></span>
<span class="line"><span>              (dftw-direct-5/4 &quot;t3bv_5_avx2_128&quot;)</span></span>
<span class="line"><span>              (dft-direct-8-x5 &quot;n2bv_8_avx2_128&quot;)))))</span></span>
<span class="line"><span>      (dft-r2hc-1</span></span>
<span class="line"><span>        (rdft-rank0-tiledbuf/2-x21-x1000))</span></span>
<span class="line"><span>      (dft-nop)))))</span></span></code></pre></div><p>Now create a power spectrum noise generator comprising the designated power spectrum and continuous noise signal. Note that the power spectrum and noise signal must be of the same dimension. The output <code>signoise</code> gives correlated power-law noise in the signal domain, with dimensions of the original <a href="/StationaryRandomFields.jl/v0.1.3/autodocs#StationaryRandomFields.NoiseSignal"><code>NoiseSignal</code></a> object.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">noisegen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PSNoiseGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stretched_ps, cns)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># generate signal noise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generate_signal_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(noisegen)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1000×1000 Matrix{Float64}:</span></span>
<span class="line"><span>  -7.25815    -8.47774   -19.3209   …  -12.293    -2.77542   -3.21276</span></span>
<span class="line"><span> -26.1107    -30.1521    -26.7916       -6.49123  -0.11004  -24.3168</span></span>
<span class="line"><span> -36.6532    -19.5314    -10.8182       12.3383    4.48122  -11.1463</span></span>
<span class="line"><span> -24.6928    -10.7023    -28.7112       19.2646    4.57794   -4.44586</span></span>
<span class="line"><span> -27.9619    -25.4173    -27.8646       14.2022   -6.22733   -9.69062</span></span>
<span class="line"><span> -14.8048    -12.0366     -8.25225  …   18.4255   -9.91069   -7.98332</span></span>
<span class="line"><span> -16.5244    -10.1966    -18.0088       21.3223   -2.65458    2.97252</span></span>
<span class="line"><span> -16.8828    -14.4444    -12.2767        8.69103  13.5866    -0.411774</span></span>
<span class="line"><span>   0.257622  -14.5699      3.9742       11.9904    7.607     -4.4698</span></span>
<span class="line"><span>   6.39922   -10.4371      3.35043      13.3139    2.22473   10.4885</span></span>
<span class="line"><span>   ⋮                                ⋱                       </span></span>
<span class="line"><span>  -7.68652     0.671146    6.4065       -2.76229   4.09961   -1.78821</span></span>
<span class="line"><span>  -6.75651     9.64024   -10.1573       15.63      4.85124  -10.4255</span></span>
<span class="line"><span>  -8.03548   -17.6185    -18.3682       28.0499   13.8747    13.091</span></span>
<span class="line"><span> -12.2129    -30.3984    -27.8115        3.31164  15.7724    23.412</span></span>
<span class="line"><span>  -9.61855   -34.0697    -43.9167   …   -9.93999  13.3404    -1.44302</span></span>
<span class="line"><span>  -1.88012   -22.1918    -40.6572        5.21987   6.89065   14.392</span></span>
<span class="line"><span>   4.23258   -12.8406      1.01098       8.91755  30.6853    22.49</span></span>
<span class="line"><span>   2.64048    -9.77987    -3.49032      25.0255   11.0396    11.8178</span></span>
<span class="line"><span>  -7.92715    -3.05861   -18.3158        5.51787  -8.10642  -15.7977</span></span></code></pre></div><p>We can now plot our generated signal noise in the signal domain:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># plot signal noise in position plane</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xgrid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Signal Noise in Image Plane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heatmap!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], xgrid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, signoise)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Colorbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], cplot)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+t+'" alt=""></p>',26)]))}const E=a(l,[["render",e]]);export{g as __pageData,E as default};
